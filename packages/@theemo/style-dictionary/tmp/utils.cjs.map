{"version":3,"sources":["../src/utils.ts"],"sourcesContent":["// import fs from 'node:fs';\n// import path from 'node:path';\n// import process from 'node:process';\n\n// export async function readModule(file: string): Promise<object> {\n//   const filepath = path.join(process.cwd(), file);\n\n//   if (!fs.existsSync(filepath)) {\n//     throw new Error(`Cannot find file: ${filepath}`);\n//   }\n\n//   return await import(filepath);\n// }\n\n// export function readJson(file: string) {\n//   return JSON.parse(fs.readFileSync(file, { encoding: 'utf-8' }));\n// }\n\nexport function set(object: Record<string, unknown>, keyPath: string[], value: unknown): void {\n  const lastKeyIndex = keyPath.length - 1;\n\n  for (let i = 0; i < lastKeyIndex; ++i) {\n    const key = keyPath[i] as keyof Record<string, unknown>;\n\n    if (!(key in object)) {\n      // eslint-disable-next-line no-param-reassign\n      object[key] = {};\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    object = object[key] as Record<string, unknown>;\n  }\n\n  if (typeof object[keyPath[lastKeyIndex]] !== 'object') {\n    // eslint-disable-next-line no-param-reassign\n    object[keyPath[lastKeyIndex]] = value;\n  }\n}\n"],"names":["set","object","keyPath","value","lastKeyIndex","length","i","key"],"mappings":"AAAA,4BAA4B;AAC5B,gCAAgC;AAChC,sCAAsC;AAEtC,oEAAoE;AACpE,qDAAqD;AAErD,oCAAoC;AACpC,wDAAwD;AACxD,MAAM;AAEN,mCAAmC;AACnC,IAAI;AAEJ,2CAA2C;AAC3C,qEAAqE;AACrE,IAAI;;;;;+BAEYA;;;eAAAA;;;AAAT,SAASA,IAAIC,MAA+B,EAAEC,OAAiB,EAAEC,KAAc;IACpF,MAAMC,eAAeF,QAAQG,MAAM,GAAG;IAEtC,IAAK,IAAIC,IAAI,GAAGA,IAAIF,cAAc,EAAEE,EAAG;QACrC,MAAMC,MAAML,OAAO,CAACI,EAAE;QAEtB,IAAI,CAAEC,CAAAA,OAAON,MAAK,GAAI;YACpB,6CAA6C;YAC7CA,MAAM,CAACM,IAAI,GAAG,CAAC;QACjB;QAEA,6CAA6C;QAC7CN,SAASA,MAAM,CAACM,IAAI;IACtB;IAEA,IAAI,OAAON,MAAM,CAACC,OAAO,CAACE,aAAa,CAAC,KAAK,UAAU;QACrD,6CAA6C;QAC7CH,MAAM,CAACC,OAAO,CAACE,aAAa,CAAC,GAAGD;IAClC;AACF"}