{"version":3,"sources":["../src/writer.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\n\nimport { TokenCollection } from '@theemo/core';\n\nimport { set } from './utils.js';\n\nimport type { StyleDictionaryWriterConfig } from './config.js';\nimport type { Token } from '@theemo/core';\n\nexport default class StyleDictionaryWriter {\n  private config: StyleDictionaryWriterConfig;\n\n  constructor(config: StyleDictionaryWriterConfig) {\n    this.config = config;\n  }\n\n  write(tokens: TokenCollection): void {\n    const files = this.getFiles(tokens);\n\n    this.writeFiles(files, tokens);\n  }\n\n  private getFiles(tokens: TokenCollection) {\n    const files: Map<string, TokenCollection> = new Map();\n\n    for (const token of tokens) {\n      const file = this.getFileFromToken(token);\n\n      if (!files.has(file)) {\n        files.set(file, new TokenCollection());\n      }\n\n      files.get(file)?.add(token);\n    }\n\n    return files;\n  }\n\n  private getFileFromToken(token: Token) {\n    return this.config.fileForToken(token);\n  }\n\n  private writeFiles(files: Map<string, TokenCollection>, allTokens: TokenCollection) {\n    for (const [file, tokenSet] of files.entries()) {\n      const contents = {};\n\n      for (const token of tokenSet) {\n        const property = this.getPathFromToken(token);\n        const data = this.buildToken(token, allTokens);\n\n        set(contents, property, data);\n      }\n\n      this.writeFile(file, contents);\n    }\n  }\n\n  private buildToken(token: Token, allTokens: TokenCollection): Record<string, unknown> {\n    const data: Record<string, unknown> = {\n      $value: this.getValue(token, allTokens),\n      $description: token.description,\n      comment: token.description,\n      ...this.getTokenData(token)\n    };\n\n    if (token.type) {\n      data.$type = token.type;\n    }\n\n    return data;\n  }\n\n  // private getFolderForGroup(groupName: string) {\n  //   return this.config.folderForGroup?.(groupName) ?? groupName;\n  // }\n\n  private getPathFromToken(token: Token) {\n    return this.config.pathForToken(token);\n  }\n\n  private getValue(token: Token, allTokens: TokenCollection) {\n    return this.config.valueForToken?.(token, allTokens) ?? `${token.value}`;\n  }\n\n  private getTokenData(token: Token) {\n    return this.config.dataForToken?.(token) ?? {};\n  }\n\n  private writeFile(file: string, data: Record<string, unknown>) {\n    const target = `${path.join(this.getDirectory(), file)}.json`;\n    const contents = JSON.stringify(data, undefined, '  ');\n    const parent = path.dirname(target);\n\n    if (!fs.existsSync(parent)) {\n      fs.mkdirSync(parent, { recursive: true });\n    }\n\n    fs.writeFileSync(target, contents);\n  }\n\n  private getDirectory() {\n    return this.config.directory ?? 'tokens';\n  }\n}\n"],"names":["StyleDictionaryWriter","write","tokens","files","getFiles","writeFiles","Map","token","file","getFileFromToken","has","set","TokenCollection","get","add","config","fileForToken","allTokens","tokenSet","entries","contents","property","getPathFromToken","data","buildToken","writeFile","$value","getValue","$description","description","comment","getTokenData","type","$type","pathForToken","valueForToken","value","dataForToken","target","path","join","getDirectory","JSON","stringify","undefined","parent","dirname","fs","existsSync","mkdirSync","recursive","writeFileSync","directory","constructor"],"mappings":"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"}